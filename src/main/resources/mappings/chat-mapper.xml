<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ChatDAO">

	<resultMap id="chatList" type="roomVO">
		<result property="projectId" column="PROJECTID" />
		<result property="chatRoomName" column="CHATROOMNAME" />
		<result property="projectName" column="PROJECTNAME" />
		<result property="roomPassword" column="ROOMPASSWORD"/>
		<result property="chatRoomId" column="CHATROOMID"/>
	</resultMap>
	
	<resultMap id="chatHistory" type="msgVO">
		<result property="message_sender" column="MESSAGE_SENDER"/>
		<result property="message_content" column="MESSAGE_CONTENT"/>
		<result property="message_sendTime" column="MESSAGE_SENDTIME"/>
	</resultMap>
	
	<resultMap id="projectList" type="user">
		<result property="seq" column="MEMBER_ID"/>
		<result property="email" column="MEMBER_EMAIL"/>
		<result property="name" column="MEMBER_NAME"/>
	</resultMap>
	
	<resultMap id="getJoinedList" type="roomVO">
		<result property="chatRoomId" column="CHATROOMID"/>
		<result property="joinedUserId" column="MEMBER_ID"/>
		<result property="connectTime" column="CONNECTTIME"/>
		<result property="userName" column="MEMBER_NAME"/>
		<result property="userEmail" column="MEMBER_EMAIL"/>
	</resultMap>
	
	<select id="getChatList" resultMap="chatList" parameterType="int">
		SELECT * FROM CHATLOG WHERE MEMBER_ID = #{userId}
	</select>
	
	<insert id="insertMessage" parameterType="msgVO">
	
		INSERT INTO MESSAGE (MESSAGE_SENDER, SENDERID, MESSAGE_CONTENT,
		CHATROOM_ID,MESSAGE_SENDTIME)
		VALUES( #{message_sender}, #{senderId}, #{message_content}, #{chatroom_id},
		#{message_sendTime})
	</insert>
	
	 <select id="loadChatHistory" resultMap="chatHistory" parameterType="msgVO" >
		SELECT * FROM MESSAGE WHERE CHATROOM_ID = #{chatroom_id} ORDER BY MESSAGE_SENDTIME ASC
	</select>
	
	<!-- <select id="getFriendList" resultMap="projectList" parameterType="int">
		SELECT PROJECT_ID, PROJECT_NAME FROM PROJECTDIR 
		INNER JOIN (SELECT PROJECT_ID FROM PROJECT_LOOKUP 
		WHERE MEMBER_ID=#{myId}) USING (PROJECT_ID)
	</select>
	 -->
	<select id="getFriendList" resultMap="projectList" parameterType="int">
		SELECT DISTINCT C.MEMBER_ID, C.MEMBER_EMAIL, C.MEMBER_NAME FROM MEMBERINFO C 
		RIGHT OUTER JOIN 
		(SELECT B.MEMBER_ID , B.PROJECT_ID FROM PROJECT_LOOKUP A 
        RIGHT OUTER JOIN (SELECT * FROM PROJECT_LOOKUP) B 
    ON A.PROJECT_ID = B.PROJECT_ID WHERE A.MEMBER_ID = #{myId}) D 
    ON C.MEMBER_ID = D.MEMBER_ID WHERE C.MEMBER_ID IS NOT NULL AND  NOT C.MEMBER_ID IN #{myId} 

	</select>
	 
	<insert id="createChatRoom" parameterType="roomVO">
		INSERT INTO CHATROOM (JOINUSER, CHATROOMNAME, CHATROOMID) VALUES( #{inviteUser}, #{userName}, (SELECT NVL(MAX(CHATROOMID), 0)+1 FROM CHATROOM))
		<selectKey keyProperty="chatRoomId" resultType="int" order="AFTER">
			SELECT MAX(CHATROOMID) FROM CHATROOM
		</selectKey>
	</insert>
	
	<select id="getChatRoomInfo" resultMap="chatList" parameterType="roomVO">
		SELECT * FROM CHATROOM WHERE CHATROOMID = #{chatRoomId}
	</select>
	
	<update id="updateConnectTime" parameterType="roomVO">
		MERGE INTO CHATLOG A USING DUAL
			ON (A.MEMBER_ID = #{joinedUserId} AND A.CHATROOMID = #{chatRoomId})
			WHEN MATCHED THEN
				UPDATE SET A.CONNECTTIME = #{connectTime}
			WHEN NOT MATCHED THEN
				INSERT (A.MEMBER_ID , A.CHATROOMID, A.CONNECTTIME)
				VALUES(#{joinedUserId}, #{chatRoomId}, #{connectTime})	
	</update> 
	
	<select id="getJoinedMember" resultMap="getJoinedList" parameterType="roomVO">
		SELECT MEMBER_NAME,MEMBER_EMAIL FROM MEMBERINFO INNER JOIN (
			SELECT MEMBER_ID FROM CHATLOG WHERE CHATROOMID = #{chatRoomId})
				USING(MEMBER_ID)
	</select>
	
	<update id="updateDisconnectTime" parameterType="msgVO">
		UPDATE CHATLOG SET DISCONNECTTIME= #{message_sendTime} WHERE CHATROOMID = #{chatroom_id} AND MEMBER_ID = #{senderId}  
	</update>
</mapper>
